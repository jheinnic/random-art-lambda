// source: protobuf/plot_mapping.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck
import * as jspb from "google-protobuf"


var goog = jspb;
var global = (function() { return this || global || Function('return this')(); }).call(null);

goog.exportSymbol('proto.plot_mapping.v1.BuildId', null, global);
goog.exportSymbol('proto.plot_mapping.v1.ImageSize', null, global);
goog.exportSymbol('proto.plot_mapping.v1.PointPlotData', null, global);
goog.exportSymbol('proto.plot_mapping.v1.PointPlotDocument', null, global);
goog.exportSymbol('proto.plot_mapping.v1.PointPlotMeta', null, global);
goog.exportSymbol('proto.plot_mapping.v1.RefPoint', null, global);
goog.exportSymbol('proto.plot_mapping.v1.RegionBoundary', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plot_mapping.v1.RegionBoundary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plot_mapping.v1.RegionBoundary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plot_mapping.v1.RegionBoundary.displayName = 'proto.plot_mapping.v1.RegionBoundary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plot_mapping.v1.ImageSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plot_mapping.v1.ImageSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plot_mapping.v1.ImageSize.displayName = 'proto.plot_mapping.v1.ImageSize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plot_mapping.v1.PointPlotData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.plot_mapping.v1.PointPlotData.repeatedFields_, null);
};
goog.inherits(proto.plot_mapping.v1.PointPlotData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plot_mapping.v1.PointPlotData.displayName = 'proto.plot_mapping.v1.PointPlotData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plot_mapping.v1.PointPlotMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plot_mapping.v1.PointPlotMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plot_mapping.v1.PointPlotMeta.displayName = 'proto.plot_mapping.v1.PointPlotMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plot_mapping.v1.BuildId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plot_mapping.v1.BuildId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plot_mapping.v1.BuildId.displayName = 'proto.plot_mapping.v1.BuildId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.plot_mapping.v1.PointPlotDocument = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.plot_mapping.v1.PointPlotDocument, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.plot_mapping.v1.PointPlotDocument.displayName = 'proto.plot_mapping.v1.PointPlotDocument';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plot_mapping.v1.RegionBoundary.prototype.toObject = function(opt_includeInstance) {
  return proto.plot_mapping.v1.RegionBoundary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plot_mapping.v1.RegionBoundary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.RegionBoundary.toObject = function(includeInstance, msg) {
  var f, obj = {
    top: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    left: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    bottom: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    right: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plot_mapping.v1.RegionBoundary}
 */
proto.plot_mapping.v1.RegionBoundary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plot_mapping.v1.RegionBoundary;
  return proto.plot_mapping.v1.RegionBoundary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plot_mapping.v1.RegionBoundary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plot_mapping.v1.RegionBoundary}
 */
proto.plot_mapping.v1.RegionBoundary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTop(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setLeft(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBottom(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plot_mapping.v1.RegionBoundary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plot_mapping.v1.RegionBoundary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plot_mapping.v1.RegionBoundary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.RegionBoundary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTop();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getLeft();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getBottom();
  if (f !== 0.0) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = message.getRight();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
};


/**
 * optional double top = 1;
 * @return {number}
 */
proto.plot_mapping.v1.RegionBoundary.prototype.getTop = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plot_mapping.v1.RegionBoundary} returns this
 */
proto.plot_mapping.v1.RegionBoundary.prototype.setTop = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double left = 2;
 * @return {number}
 */
proto.plot_mapping.v1.RegionBoundary.prototype.getLeft = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plot_mapping.v1.RegionBoundary} returns this
 */
proto.plot_mapping.v1.RegionBoundary.prototype.setLeft = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional double bottom = 3;
 * @return {number}
 */
proto.plot_mapping.v1.RegionBoundary.prototype.getBottom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plot_mapping.v1.RegionBoundary} returns this
 */
proto.plot_mapping.v1.RegionBoundary.prototype.setBottom = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional double right = 4;
 * @return {number}
 */
proto.plot_mapping.v1.RegionBoundary.prototype.getRight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.plot_mapping.v1.RegionBoundary} returns this
 */
proto.plot_mapping.v1.RegionBoundary.prototype.setRight = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plot_mapping.v1.ImageSize.prototype.toObject = function(opt_includeInstance) {
  return proto.plot_mapping.v1.ImageSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plot_mapping.v1.ImageSize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.ImageSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    pixelheight: jspb.Message.getFieldWithDefault(msg, 7, 0),
    pixelwidth: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plot_mapping.v1.ImageSize}
 */
proto.plot_mapping.v1.ImageSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plot_mapping.v1.ImageSize;
  return proto.plot_mapping.v1.ImageSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plot_mapping.v1.ImageSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plot_mapping.v1.ImageSize}
 */
proto.plot_mapping.v1.ImageSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPixelheight(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPixelwidth(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plot_mapping.v1.ImageSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plot_mapping.v1.ImageSize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plot_mapping.v1.ImageSize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.ImageSize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPixelheight();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getPixelwidth();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional uint32 pixelHeight = 7;
 * @return {number}
 */
proto.plot_mapping.v1.ImageSize.prototype.getPixelheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.plot_mapping.v1.ImageSize} returns this
 */
proto.plot_mapping.v1.ImageSize.prototype.setPixelheight = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 pixelWidth = 8;
 * @return {number}
 */
proto.plot_mapping.v1.ImageSize.prototype.getPixelwidth = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.plot_mapping.v1.ImageSize} returns this
 */
proto.plot_mapping.v1.ImageSize.prototype.setPixelwidth = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.plot_mapping.v1.PointPlotData.repeatedFields_ = [5,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plot_mapping.v1.PointPlotData.prototype.toObject = function(opt_includeInstance) {
  return proto.plot_mapping.v1.PointPlotData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plot_mapping.v1.PointPlotData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.PointPlotData.toObject = function(includeInstance, msg) {
  var f, obj = {
    pixelref: jspb.Message.getFieldWithDefault(msg, 1, 0),
    resolution: (f = msg.getResolution()) && proto.plot_mapping.v1.ImageSize.toObject(includeInstance, f),
    mappedRegion: (f = msg.getMappedRegion()) && proto.plot_mapping.v1.RegionBoundary.toObject(includeInstance, f),
    uniform: jspb.Message.getBooleanFieldWithDefault(msg, 4, false),
    rowsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    columnsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plot_mapping.v1.PointPlotData}
 */
proto.plot_mapping.v1.PointPlotData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plot_mapping.v1.PointPlotData;
  return proto.plot_mapping.v1.PointPlotData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plot_mapping.v1.PointPlotData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plot_mapping.v1.PointPlotData}
 */
proto.plot_mapping.v1.PointPlotData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.plot_mapping.v1.RefPoint} */ (reader.readEnum());
      msg.setPixelref(value);
      break;
    case 2:
      var value = new proto.plot_mapping.v1.ImageSize;
      reader.readMessage(value,proto.plot_mapping.v1.ImageSize.deserializeBinaryFromReader);
      msg.setResolution(value);
      break;
    case 3:
      var value = new proto.plot_mapping.v1.RegionBoundary;
      reader.readMessage(value,proto.plot_mapping.v1.RegionBoundary.deserializeBinaryFromReader);
      msg.setMappedRegion(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setUniform(value);
      break;
    case 5:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addRows(values[i]);
      }
      break;
    case 6:
      var values = /** @type {!Array<number>} */ (reader.isDelimited() ? reader.readPackedDouble() : [reader.readDouble()]);
      for (var i = 0; i < values.length; i++) {
        msg.addColumns(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plot_mapping.v1.PointPlotData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plot_mapping.v1.PointPlotData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plot_mapping.v1.PointPlotData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.PointPlotData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPixelref();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getResolution();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plot_mapping.v1.ImageSize.serializeBinaryToWriter
    );
  }
  f = message.getMappedRegion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.plot_mapping.v1.RegionBoundary.serializeBinaryToWriter
    );
  }
  f = message.getUniform();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      5,
      f
    );
  }
  f = message.getColumnsList();
  if (f.length > 0) {
    writer.writePackedDouble(
      6,
      f
    );
  }
};


/**
 * optional RefPoint pixelRef = 1;
 * @return {!proto.plot_mapping.v1.RefPoint}
 */
proto.plot_mapping.v1.PointPlotData.prototype.getPixelref = function() {
  return /** @type {!proto.plot_mapping.v1.RefPoint} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.plot_mapping.v1.RefPoint} value
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.setPixelref = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional ImageSize resolution = 2;
 * @return {?proto.plot_mapping.v1.ImageSize}
 */
proto.plot_mapping.v1.PointPlotData.prototype.getResolution = function() {
  return /** @type{?proto.plot_mapping.v1.ImageSize} */ (
    jspb.Message.getWrapperField(this, proto.plot_mapping.v1.ImageSize, 2));
};


/**
 * @param {?proto.plot_mapping.v1.ImageSize|undefined} value
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
*/
proto.plot_mapping.v1.PointPlotData.prototype.setResolution = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.clearResolution = function() {
  return this.setResolution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plot_mapping.v1.PointPlotData.prototype.hasResolution = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional RegionBoundary mapped_region = 3;
 * @return {?proto.plot_mapping.v1.RegionBoundary}
 */
proto.plot_mapping.v1.PointPlotData.prototype.getMappedRegion = function() {
  return /** @type{?proto.plot_mapping.v1.RegionBoundary} */ (
    jspb.Message.getWrapperField(this, proto.plot_mapping.v1.RegionBoundary, 3));
};


/**
 * @param {?proto.plot_mapping.v1.RegionBoundary|undefined} value
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
*/
proto.plot_mapping.v1.PointPlotData.prototype.setMappedRegion = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.clearMappedRegion = function() {
  return this.setMappedRegion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plot_mapping.v1.PointPlotData.prototype.hasMappedRegion = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool uniform = 4;
 * @return {boolean}
 */
proto.plot_mapping.v1.PointPlotData.prototype.getUniform = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.setUniform = function(value) {
  return jspb.Message.setProto3BooleanField(this, 4, value);
};


/**
 * repeated double rows = 5;
 * @return {!Array<number>}
 */
proto.plot_mapping.v1.PointPlotData.prototype.getRowsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.setRowsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.addRows = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};


/**
 * repeated double columns = 6;
 * @return {!Array<number>}
 */
proto.plot_mapping.v1.PointPlotData.prototype.getColumnsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.setColumnsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.addColumns = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.plot_mapping.v1.PointPlotData} returns this
 */
proto.plot_mapping.v1.PointPlotData.prototype.clearColumnsList = function() {
  return this.setColumnsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.plot_mapping.v1.PointPlotMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plot_mapping.v1.PointPlotMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.PointPlotMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    ulid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    path: jspb.Message.getFieldWithDefault(msg, 2, ""),
    createtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    origin: (f = msg.getOrigin()) && proto.plot_mapping.v1.BuildId.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plot_mapping.v1.PointPlotMeta}
 */
proto.plot_mapping.v1.PointPlotMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plot_mapping.v1.PointPlotMeta;
  return proto.plot_mapping.v1.PointPlotMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plot_mapping.v1.PointPlotMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plot_mapping.v1.PointPlotMeta}
 */
proto.plot_mapping.v1.PointPlotMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUlid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPath(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setCreatetime(value);
      break;
    case 4:
      var value = new proto.plot_mapping.v1.BuildId;
      reader.readMessage(value,proto.plot_mapping.v1.BuildId.deserializeBinaryFromReader);
      msg.setOrigin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plot_mapping.v1.PointPlotMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plot_mapping.v1.PointPlotMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.PointPlotMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUlid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPath();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getOrigin();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.plot_mapping.v1.BuildId.serializeBinaryToWriter
    );
  }
};


/**
 * optional string ulid = 1;
 * @return {string}
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.getUlid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plot_mapping.v1.PointPlotMeta} returns this
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.setUlid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string path = 2;
 * @return {string}
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.getPath = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plot_mapping.v1.PointPlotMeta} returns this
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.setPath = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint64 createTime = 3;
 * @return {number}
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.plot_mapping.v1.PointPlotMeta} returns this
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional BuildId origin = 4;
 * @return {?proto.plot_mapping.v1.BuildId}
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.getOrigin = function() {
  return /** @type{?proto.plot_mapping.v1.BuildId} */ (
    jspb.Message.getWrapperField(this, proto.plot_mapping.v1.BuildId, 4));
};


/**
 * @param {?proto.plot_mapping.v1.BuildId|undefined} value
 * @return {!proto.plot_mapping.v1.PointPlotMeta} returns this
*/
proto.plot_mapping.v1.PointPlotMeta.prototype.setOrigin = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plot_mapping.v1.PointPlotMeta} returns this
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.clearOrigin = function() {
  return this.setOrigin(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plot_mapping.v1.PointPlotMeta.prototype.hasOrigin = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plot_mapping.v1.BuildId.prototype.toObject = function(opt_includeInstance) {
  return proto.plot_mapping.v1.BuildId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plot_mapping.v1.BuildId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.BuildId.toObject = function(includeInstance, msg) {
  var f, obj = {
    sourcename: jspb.Message.getFieldWithDefault(msg, 1, ""),
    sourceurl: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sourceref: jspb.Message.getFieldWithDefault(msg, 3, ""),
    version: jspb.Message.getFieldWithDefault(msg, 4, ""),
    build: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plot_mapping.v1.BuildId}
 */
proto.plot_mapping.v1.BuildId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plot_mapping.v1.BuildId;
  return proto.plot_mapping.v1.BuildId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plot_mapping.v1.BuildId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plot_mapping.v1.BuildId}
 */
proto.plot_mapping.v1.BuildId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourcename(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceurl(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSourceref(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setBuild(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plot_mapping.v1.BuildId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plot_mapping.v1.BuildId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plot_mapping.v1.BuildId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.BuildId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSourcename();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSourceurl();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSourceref();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getBuild();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string sourceName = 1;
 * @return {string}
 */
proto.plot_mapping.v1.BuildId.prototype.getSourcename = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.plot_mapping.v1.BuildId} returns this
 */
proto.plot_mapping.v1.BuildId.prototype.setSourcename = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string sourceUrl = 2;
 * @return {string}
 */
proto.plot_mapping.v1.BuildId.prototype.getSourceurl = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.plot_mapping.v1.BuildId} returns this
 */
proto.plot_mapping.v1.BuildId.prototype.setSourceurl = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string sourceRef = 3;
 * @return {string}
 */
proto.plot_mapping.v1.BuildId.prototype.getSourceref = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.plot_mapping.v1.BuildId} returns this
 */
proto.plot_mapping.v1.BuildId.prototype.setSourceref = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string version = 4;
 * @return {string}
 */
proto.plot_mapping.v1.BuildId.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.plot_mapping.v1.BuildId} returns this
 */
proto.plot_mapping.v1.BuildId.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string build = 5;
 * @return {string}
 */
proto.plot_mapping.v1.BuildId.prototype.getBuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.plot_mapping.v1.BuildId} returns this
 */
proto.plot_mapping.v1.BuildId.prototype.setBuild = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.toObject = function(opt_includeInstance) {
  return proto.plot_mapping.v1.PointPlotDocument.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.plot_mapping.v1.PointPlotDocument} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.PointPlotDocument.toObject = function(includeInstance, msg) {
  var f, obj = {
    meta: (f = msg.getMeta()) && proto.plot_mapping.v1.PointPlotMeta.toObject(includeInstance, f),
    data: (f = msg.getData()) && proto.plot_mapping.v1.PointPlotData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.plot_mapping.v1.PointPlotDocument}
 */
proto.plot_mapping.v1.PointPlotDocument.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.plot_mapping.v1.PointPlotDocument;
  return proto.plot_mapping.v1.PointPlotDocument.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.plot_mapping.v1.PointPlotDocument} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.plot_mapping.v1.PointPlotDocument}
 */
proto.plot_mapping.v1.PointPlotDocument.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.plot_mapping.v1.PointPlotMeta;
      reader.readMessage(value,proto.plot_mapping.v1.PointPlotMeta.deserializeBinaryFromReader);
      msg.setMeta(value);
      break;
    case 2:
      var value = new proto.plot_mapping.v1.PointPlotData;
      reader.readMessage(value,proto.plot_mapping.v1.PointPlotData.deserializeBinaryFromReader);
      msg.setData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.plot_mapping.v1.PointPlotDocument.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.plot_mapping.v1.PointPlotDocument} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.plot_mapping.v1.PointPlotDocument.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMeta();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.plot_mapping.v1.PointPlotMeta.serializeBinaryToWriter
    );
  }
  f = message.getData();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.plot_mapping.v1.PointPlotData.serializeBinaryToWriter
    );
  }
};


/**
 * optional PointPlotMeta meta = 1;
 * @return {?proto.plot_mapping.v1.PointPlotMeta}
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.getMeta = function() {
  return /** @type{?proto.plot_mapping.v1.PointPlotMeta} */ (
    jspb.Message.getWrapperField(this, proto.plot_mapping.v1.PointPlotMeta, 1));
};


/**
 * @param {?proto.plot_mapping.v1.PointPlotMeta|undefined} value
 * @return {!proto.plot_mapping.v1.PointPlotDocument} returns this
*/
proto.plot_mapping.v1.PointPlotDocument.prototype.setMeta = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plot_mapping.v1.PointPlotDocument} returns this
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.clearMeta = function() {
  return this.setMeta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.hasMeta = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PointPlotData data = 2;
 * @return {?proto.plot_mapping.v1.PointPlotData}
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.getData = function() {
  return /** @type{?proto.plot_mapping.v1.PointPlotData} */ (
    jspb.Message.getWrapperField(this, proto.plot_mapping.v1.PointPlotData, 2));
};


/**
 * @param {?proto.plot_mapping.v1.PointPlotData|undefined} value
 * @return {!proto.plot_mapping.v1.PointPlotDocument} returns this
*/
proto.plot_mapping.v1.PointPlotDocument.prototype.setData = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.plot_mapping.v1.PointPlotDocument} returns this
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.clearData = function() {
  return this.setData(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.plot_mapping.v1.PointPlotDocument.prototype.hasData = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * @enum {number}
 */
proto.plot_mapping.v1.RefPoint = {
  TOP_LEFT: 0,
  CENTER: 1
};

export const { BuildId, ImageSize, PointPlotData, PointPlotDocument, PointPlotMeta, RefPoint, RegionBoundary } = proto.plot_mapping.v1
